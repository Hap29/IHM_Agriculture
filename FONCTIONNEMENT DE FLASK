FONCTIONNEMENT DE FLASK
-------------------------------------------------------------------------------------------------------------------

Prérequis :   Flask ( $pip3 install flask)
1.EXPLICATION SIMPLE ET GLOBALE
(Cf: https://flask.palletsprojects.com/en/1.1.x/)

from flask import Flask           #1
app = Flask(__name__)	          #2

@app.route('/')	           #3
def hello_world():	           #4
    return  "Hello, World!"         #5

if __name__ == "__main__":    #6
    app.run(host='0.0.0.0' , port= 5000, debug=True)    #7


#1. Import de la classe Flask de la librairie. Cette instance est notre application.
#2. Instanciation de cette classe. Le premier argument est le nom du module ou du package de l'application. Si vous utilisez un seul module (comme dans cet exemple), vous devez utiliser __name__ car selon qu'il est démarré en tant qu'application ou importé en tant que module, le nom sera différent (« __main__» par rapport au nom d'importation réel). Ceci est nécessaire pour que Flask sache où chercher les modèles, les fichiers statiques, etc. Pour plus d'informations, consultez la documentation Flask.
#3. Nous utilisons ensuite le décorateur route() pour indiquer à Flask quelle URL doit déclencher notre fonction.
#4. C'est la fonction associée à la page de notre décorateur (#3). Doit obligatoirement retourner quelque chose pour fonctionner.
#5. Retour de ce que la page WEB va afficher, ici un simple texte. Des balises HTLM peuvent être mise. Dans la suite de cette documentation nous allons voir pour intégrer une page WEB à la place de ce retour simple de texte.
#6. L'application name devient la fonction principale 'main’. (Comme en C ou C++)
#7. Lancement de notre application/serveur, non en localhost, mais accessible à toute les machines (0.0.0.0). Peut-être modifier pour qu'une seule machine spécifique puisse accéder au serveur, ou simplement en localhost. 'Debug True', permet d’afficher les erreurs durant la phase de développement --> à désactiver en utilisation classique. Port 5000 correspond au port au s'exécute FLASK. Par défaut il est à 5000.
>>Pour acceder au site au lancement du code :     http://@IPraspeberry:5000/
2.INTEGRATION DE PAGE HTML
	A.Arborescence à respecter:

|main.py
|---- | static
|  ----|---- style.css
|-----|templates
| -----|----index.html

	-main.py est l'application/serveur FLASK. ( nom peut être changé)
	-Le dossier static est le conteneur pour tout les fichiers CSS, JavaScript, et les images à intégrer au site si besoin. (nom du dossier doit être le même, pas forcément les fichiers)
	-Le dossier templates contient toutes les pages HTML que le site peut avoir. (nom du dossier doit être le même, pas forcément les fichiers)
	
	B.Fonctionnement simple pour l'affichage d'une page WEB :

from flask import Flask , render_template           
app = Flask(__name__)	          

@app.route('/')	           
def fonction1():	           
    return  render_template("index.html")     #1

if __name__ == "__main__":    
    app.run(host='0.0.0.0' , debug=True)

#1 . Cherche la page HTML dans le dossier selon l'arborescence de FLASK (Cf : 2.a ). Affiche cette page lorsque le code est executé et que l'on accede à http://@IPraspeberry:5000/.
	>> Si l'on change dans le code : @app.route('/default') l'acces se fera différement pour atteindre la page : http://@IPraspeberry:5000/default

	C.Envoi de données de notre code Python vers la page HTML.

from flask import Flask , render_template           
app = Flask(__name__)	          

@app.route('/')	           
def fonction1():
    valeur_a_envoyer =  "C'est un test"                       		           
    return  render_template("index.html", val = valeur_a_envoyer  )              #1

if __name__ == "__main__":    
    app.run(host='0.0.0.0' , debug=True)

#1 . Dans le code HTML la valeur valeur_a_envoyer est accessible avec le nom val. Grace à Jinja, la page HTML pourra l'afficher de cette manière {{val}}. Il y a d'autre possiblités notamment écrire des fonction dans la page WEB grâce à Jinga. Voir la documentation pour plus d'infos.

Exemple page HTML simple avec l'affichage de notre valeur: 

<!DOCTYPE html>
<html>
  	<head>
  	</head>
 
  	<body>
		<h1> Cette page : {{val}}  </h1>
  	</body>
</html>

	D.Envoi de la page WEB vers le code Python
Python fait très bien du traitement de données, et cela évite des scripts JAVA.

from flask import Flask , render_template , request
app = Flask(__name__)	          

@app.route('/')	           
def fonction1():
    valeur_a_envoyer =  "C'est un test"                       		           
    return  render_template("index.html", val = valeur_a_envoyer  )      
     
@app.route('/', methods = ['POST'])   #1
def fonction2(): 
    r = request.form['Reglage']                  #2
    print(r)
    return fonction1()                                     #3

if __name__ == "__main__":    
    app.run(host='0.0.0.0' , debug=True)

#1 . Ajout de la méthode POST pour échanger des valeur en protocole HTTP entre les différentes pages WEB.
#2 . Je recupère dans ma page toutes les requetes qui on comme paramètres ['Reglage'].Puis je l'affiche (print(r)).
#3 . Si après l'interaction je veux garder la même page principale, il faut retourner la fonction de la même route sans méthode. Sinon on peut référer au paragraphe 2.b (Cf : 2.b) .
Exemple page HTML simple avec envoi d'une valeur: 

<!DOCTYPE html>
<html>
  	<head>
  	</head>
 
  	<body>
		<h1> Cette page : {{val}}  <h1/>

		<form action=" " method="POST">
		<input type="range" id="Reglage" name="Reglage" min="0" max="10" value="5" step="1">
		<input type="submit" value="Appuyer">
		</form>

  	</body>
</html>


3.ENDPOINT SUR LE SERVEUR FLASK

from flask import Flask , render_template  , request         
app = Flask(__name__)	          

@app.route('/')	           
def fonction1():	           
    return  render_template("index.html")     

@app.route('/endpoint', methods = ['POST'],['GET'])   
def endpoint():
    donnees = request.data
    print(donnees)
    return index()     

if __name__ == "__main__":    
    app.run(host='0.0.0.0' , debug=True)


	>>Quand un envoi se produit d'un site sur l'URL http://@IPraspeberry:5000/endpoint . Dans le terminal, un message affiche les données qui sont de type 'bytes' (objet octect --> voir référence python). Les données peuvent être retournées dans d'autre fonction, et faire de la même manière que dans le paragraphe 2.b (Cf : 2b ).












